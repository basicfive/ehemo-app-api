name: Deploy fastapi server as docker image on private ec2 instance

on:
  push:
    branches: [ "prod" ]

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/ehemo-app-api/prod

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    # Echo Secret File
    - name: Echo .env
      if: contains(github.ref, 'prod')
      run: |
        touch .env
        echo '${{ secrets.PROD_DOTENV }}' > .env
      shell: bash

    # Echo firebase
    - name: Echo firebase-adminsdk.json
      if: contains(github.ref, 'prod')
      run: |
        touch firebase-adminsdk.json
        echo '${{ secrets.PROD_FIREBASE_SDK }}' > firebase-adminsdk.json
      shell: bash

    # Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

    # Get Github Runner IP
    - name: Get Github action IP
      run: echo "IP=$(curl -s ifconfig.me)" >> $GITHUB_ENV

    - name: Setting environment variables
      if: contains(github.ref, 'prod')
      run: |
        echo "AWS_DEFAULT_REGION=${{ secrets.PROD_AWS_REGION }}" >> $GITHUB_ENV
        echo "AWS_BASTION_SG_ID=${{ secrets.PROD_AWS_BASTION_SG_ID }}" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      if: contains(github.ref, 'prod')
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_KEY }}
        aws-region: ${{ secrets.PROD_AWS_REGION }}

    # Add Github Runner IP to Bastion's security group
    - name: Add IP to bastion security group
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ env.AWS_BASTION_SG_ID }} --protocol tcp --port 22 --cidr ${{ env.IP }}/32

    # Setup SSH Config for Bastion Host
    - name: Setup SSH Config
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PROD_BASTION_SSH_KEY }}" > ~/.ssh/bastion_key
        echo "${{ secrets.PROD_TARGET_SSH_KEY }}" > ~/.ssh/target_key
        chmod 400 ~/.ssh/bastion_key
        chmod 400 ~/.ssh/target_key
        cat >> ~/.ssh/config << EOF
        Host bastion
            HostName ${{ secrets.PROD_BASTION_HOST }}
            User ${{ secrets.PROD_BASTION_USER }}
            IdentityFile ~/.ssh/bastion_key
            StrictHostKeyChecking no
            
        Host target
            HostName ${{ secrets.PROD_TARGET_PRIVATE_IP }}
            User ${{ secrets.PROD_TARGET_USER }}
            IdentityFile ~/.ssh/target_key
            ProxyCommand ssh -W %h:%p bastion
            StrictHostKeyChecking no
        EOF

    - name: Deploy to Private Server
      if: contains(github.ref, 'prod')
      run: |
        ssh target << 'ENDSSH'
        echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
        
        # 기존 컨테이너 정리
        docker-compose down || true
        docker rmi ${{ env.DOCKER_IMAGE }}:latest || true
        
        # 새 이미지 pull 및 실행
        DOCKER_IMAGE=${{ env.DOCKER_IMAGE }} docker-compose up -d
        
        echo "=== Container Status ==="
        docker-compose ps
        ENDSSH

    # Remove Github runner IP from Bastion's security group
    - name: Remove IP from bastion security group
      if: always()
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ env.AWS_BASTION_SG_ID }} --protocol tcp --port 22 --cidr ${{ env.IP }}/32