name: Deploy fastapi server as docker image on private ec2 instance

on:
  push:
    branches: [ "dev", "prod" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # 환경 설정: 파일 생성 및 환경 변수 설정
    - name: Configure Environment
      run: |
        # SSH 키 저장을 위한 디렉토리 생성
        mkdir -p $HOME/.ssh
        
        # 브랜치별 환경 설정
        if [[ ${{ github.ref }} == 'refs/heads/prod' ]]; then
          # 설정 파일 생성
          echo '${{ secrets.PROD_DOTENV }}' > .env
          echo '${{ secrets.PROD_FIREBASE_SDK }}' > firebase-adminsdk.json
          
          # 환경 변수 설정
          {
            echo "DOCKER_IMAGE=ghcr.io/${{ github.actor }}/ehemo-app-api/prod"
            echo "GITHUB_TOKEN=${{ secrets.GHCR_TOKEN }}"
            echo "AWS_REGION=${{ secrets.PROD_AWS_REGION }}"
            echo "AWS_ACCESS_KEY=${{ secrets.PROD_AWS_ACCESS_KEY }}"
            echo "AWS_SECRET_KEY=${{ secrets.PROD_AWS_SECRET_KEY }}"
            echo "AWS_BASTION_SG_ID=${{ secrets.PROD_AWS_BASTION_SG_ID }}"
            echo "BASTION_HOST=${{ secrets.PROD_BASTION_HOST }}"
            echo "BASTION_USER=${{ secrets.PROD_BASTION_USER }}"
            echo "TARGET_PRIVATE_IP=${{ secrets.PROD_TARGET_PRIVATE_IP }}"
            echo "TARGET_USER=${{ secrets.PROD_TARGET_USER }}"
          } >> $GITHUB_ENV
          
          # SSH 키 파일 생성
          echo '${{ secrets.PROD_BASTION_SSH_KEY }}' > $HOME/.ssh/bastion_key
          echo '${{ secrets.PROD_TARGET_SSH_KEY }}' > $HOME/.ssh/target_key
        
        else
          # 설정 파일 생성
          echo '${{ secrets.DEV_DOTENV }}' > .env
          echo '${{ secrets.DEV_FIREBASE_SDK }}' > firebase-adminsdk.json
          
          # 환경 변수 설정
          {
            echo "DOCKER_IMAGE=ghcr.io/${{ github.actor }}/ehemo-app-api/dev"
            echo "GITHUB_TOKEN=${{ secrets.GHCR_TOKEN }}"
            echo "AWS_REGION=${{ secrets.DEV_AWS_REGION }}"
            echo "AWS_ACCESS_KEY=${{ secrets.DEV_AWS_ACCESS_KEY }}"
            echo "AWS_SECRET_KEY=${{ secrets.DEV_AWS_SECRET_KEY }}"
            echo "AWS_BASTION_SG_ID=${{ secrets.DEV_AWS_BASTION_SG_ID }}"
            echo "BASTION_HOST=${{ secrets.DEV_BASTION_HOST }}"
            echo "BASTION_USER=${{ secrets.DEV_BASTION_USER }}"
            echo "TARGET_PRIVATE_IP=${{ secrets.DEV_TARGET_PRIVATE_IP }}"
            echo "TARGET_USER=${{ secrets.DEV_TARGET_USER }}"
          } >> $GITHUB_ENV
          
          # SSH 키 파일 생성
          echo '${{ secrets.DEV_BASTION_SSH_KEY }}' > $HOME/.ssh/bastion_key
          echo '${{ secrets.DEV_TARGET_SSH_KEY }}' > $HOME/.ssh/target_key
        fi
        
        # SSH 키 파일 권한 설정
        chmod 400 $HOME/.ssh/bastion_key $HOME/.ssh/target_key

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ env.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

    - name: Get Github action IP
      run: echo "IP=$(curl -s ifconfig.me)" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ env.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Add IP to bastion security group
      run: |
        if ! aws ec2 authorize-security-group-ingress --group-id ${{ env.AWS_BASTION_SG_ID }} --protocol tcp --port 22 --cidr ${{ env.IP }}/32; then
          echo "Failed to add IP to security group"
          exit 1
        fi

    - name: Setup SSH Config
      run: |
        cat >> $HOME/.ssh/config << EOF
        Host bastion
            HostName ${{ env.BASTION_HOST }}
            User ${{ env.BASTION_USER }}
            IdentityFile $HOME/.ssh/bastion_key
            StrictHostKeyChecking no
            
        Host target
            HostName ${{ env.TARGET_PRIVATE_IP }}
            User ${{ env.TARGET_USER }}
            IdentityFile $HOME/.ssh/target_key
            ProxyCommand ssh -W %h:%p bastion
            StrictHostKeyChecking no
        EOF


    - name: Deploy to Private Server
      run: |
        echo "Starting deployment process..."
        
        # docker-compose.yml 파일을 서버로 전송
        if ! scp docker-compose.yml target:~/docker-compose.yml; then
          echo "Failed to transfer docker-compose.yml"
          exit 1
        fi

        ssh target << 'ENDSSH'
        echo "=== Current Container Status ==="
        docker ps -a
        
        # 1. 컨테이너 중지
        echo "Stopping containers..."
        docker-compose down
        
        # 2. 기존 서버 이미지 삭제
        echo "Removing existing server image..."
        docker rmi ghcr.io/ehemo-app-api:latest || true
        
        # 3. 새 이미지 pull 및 태그 설정
        echo "Pulling new image..."
        if ! docker pull ${{ env.DOCKER_IMAGE }}:latest; then
          echo "Failed to pull new image"
          exit 1
        fi
        docker tag ${{ env.DOCKER_IMAGE }}:latest ghcr.io/ehemo-app-api:latest
        
        # 4. 컨테이너 시작
        echo "Starting containers..."
        if ! docker-compose up -d; then
          echo "Failed to start containers"
          exit 1
        fi
        
        echo "=== Final Container Status ==="
        docker-compose ps
        ENDSSH

    - name: Remove IP from bastion security group
      if: always()
      run: |
        if ! aws ec2 revoke-security-group-ingress --group-id ${{ env.AWS_BASTION_SG_ID }} --protocol tcp --port 22 --cidr ${{ env.IP }}/32; then
          echo "Failed to remove IP from security group"
          exit 1
        fi

    # 정리 단계: 파일 삭제 및 환경 변수 해제
    - name: Cleanup
      if: always()
      run: |
        # 생성한 파일들 삭제
        rm -f .env firebase-adminsdk.json
        rm -f $HOME/.ssh/bastion_key $HOME/.ssh/target_key
        
        # 환경 변수 해제
        unset DOCKER_IMAGE
        unset GITHUB_TOKEN
        unset AWS_REGION
        unset AWS_ACCESS_KEY
        unset AWS_SECRET_KEY
        unset AWS_BASTION_SG_ID
        unset BASTION_HOST
        unset BASTION_USER
        unset TARGET_PRIVATE_IP
        unset TARGET_USER
        unset IP